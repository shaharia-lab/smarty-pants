openapi: 3.0.0
info:
  title: SmartyPants AI API
  version: 1.0.0
  description: API for managing documents, datasources, and embedding providers in the SmartyPants AI system.

paths:
  /:
    get:
      summary: Welcome message
      responses:
        '200':
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
                example: "Welcome to the API"

  /api/documents:
    get:
      summary: Get documents
      parameters:
        - in: query
          name: uuid
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, ready_to_search, error_processing]
        - in: query
          name: source_uuid
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDocuments'

  /api/document/{uuid}:
    get:
      summary: Get a specific document
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Document not found

  /api/datasource:
    post:
      summary: Add a new datasource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasourcePayload'
      responses:
        '201':
          description: Datasource created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasourceConfig'
        '400':
          description: Invalid request body

  /api/datasource/{uuid}:
    get:
      summary: Get a specific datasource
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasourceConfig'
        '404':
          description: Datasource not found

  /api/datasource/{uuid}/validate:
    get:
      summary: Validate a specific datasource
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Datasource validated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "success"
        '400':
          description: Validation failed

  /api/datasources:
    get:
      summary: Get all datasources
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDatasources'

  /api/embedding-provider:
    post:
      summary: Add a new embedding provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingProviderConfig'
      responses:
        '200':
          description: Embedding provider created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingProviderConfig'
        '400':
          description: Invalid request body

  /api/embedding-provider/{uuid}:
    put:
      summary: Update an embedding provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingProviderConfig'
      responses:
        '200':
          description: Embedding provider updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingProviderConfig'
        '400':
          description: Invalid request body
    delete:
      summary: Delete an embedding provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Embedding provider deleted successfully
    get:
      summary: Get a specific embedding provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingProviderConfig'
        '404':
          description: Embedding provider not found

  /api/embedding-providers:
    get:
      summary: Get all embedding providers
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEmbeddingProviders'

  /api/embedding-provider/{uuid}/activate:
    post:
      summary: Activate an embedding provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Embedding provider activated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Embedding provider activated successfully"
        '400':
          description: Invalid UUID
        '500':
          description: Failed to activate embedding provider
  /api/settings:
    get:
      summary: Get current settings
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '500':
          description: Internal server error
    put:
      summary: Update settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '400':
          description: Invalid request body
        '500':
          description: Internal server error

components:
  schemas:
    Document:
      type: object
      properties:
        uuid:
          type: string
        title:
          type: string
        body:
          type: string
        embedding:
          $ref: '#/components/schemas/Embedding'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
        status:
          type: string
          enum: [pending, ready_to_search, error_processing]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        source:
          $ref: '#/components/schemas/Source'

    Embedding:
      type: object
      properties:
        embedding:
          type: array
          items:
            $ref: '#/components/schemas/ContentPart'

    ContentPart:
      type: object
      properties:
        content:
          type: string
        embedding:
          type: array
          items:
            type: number
            format: float

    Metadata:
      type: object
      properties:
        key:
          type: string
        value:
          type: string

    Source:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        type:
          type: string

    PaginatedDocuments:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        total:
          type: integer
        page:
          type: integer
        per_page:
          type: integer
        total_pages:
          type: integer

    DatasourcePayload:
      type: object
      properties:
        name:
          type: string
        source_type:
          type: string
        settings:
          type: object

    DatasourceConfig:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        status:
          type: string
        source_type:
          type: string
        settings:
          oneOf:
            - $ref: '#/components/schemas/SlackSettings'
            - $ref: '#/components/schemas/GitHubSettings'
        state:
          oneOf:
            - $ref: '#/components/schemas/SlackState'
            - $ref: '#/components/schemas/GitHubState'

    SlackSettings:
      type: object
      properties:
        token:
          type: string
        channel_id:
          type: string
        workspace:
          type: string

    GitHubSettings:
      type: object
      properties:
        org:
          type: string

    SlackState:
      type: object
      properties:
        type:
          type: string
          enum: [slack]
        next_cursor:
          type: string

    GitHubState:
      type: object
      properties:
        type:
          type: string
          enum: [github]
        next_cursor:
          type: string

    PaginatedDatasources:
      type: object
      properties:
        datasources:
          type: array
          items:
            $ref: '#/components/schemas/DatasourceConfig'
        total:
          type: integer
        page:
          type: integer
        per_page:
          type: integer
        total_pages:
          type: integer

    EmbeddingProviderConfig:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        provider:
          type: string
        configuration:
          oneOf:
            - $ref: '#/components/schemas/OpenAISettings'
        status:
          type: string

    OpenAISettings:
      type: object
      properties:
        api_key:
          type: string
        model_id:
          type: string

    PaginatedEmbeddingProviders:
      type: object
      properties:
        embedding_providers:
          type: array
          items:
            $ref: '#/components/schemas/EmbeddingProviderConfig'
        total:
          type: integer
        page:
          type: integer
        per_page:
          type: integer
        total_pages:
          type: integer

    Settings:
      type: object
      properties:
        general:
          type: object
          properties:
            application_name:
              type: string
        debugging:
          type: object
          properties:
            log_level:
              type: string
              enum: [debug, info, warn, error]
            log_format:
              type: string
              enum: [json, text]
            log_output:
              type: string
              enum: [stdout, stderr, file]
        search:
          type: object
          properties:
            per_page:
              type: integer
              minimum: 1
              maximum: 100
      required:
        - general
        - debugging
        - search