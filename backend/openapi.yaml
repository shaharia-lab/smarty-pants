openapi: 3.0.0
info:
  title: Smarty Pants AI API
  version: 1.0.0
  description: API for the Smarty Pants AI application

servers:
  - url: http://localhost:8080/api/v1
    description: Main API endpoints for v1

paths:
  /system/ping:
    servers:
      - url: http://localhost:8080
        description: System endpoints
    get:
      summary: Ping the system
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'

  /system/probes/liveness:
    servers:
      - url: http://localhost:8080
        description: System endpoints
    get:
      summary: Check system liveness
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivenessResponse'

  /system/probes/readiness:
    servers:
      - url: http://localhost:8080
        description: System endpoints
    get:
      summary: Check system readiness
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessResponse'
  /analytics/overview:
    get:
      summary: Get analytics overview
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsOverview'

  /datasource:
    post:
      summary: Add a new datasource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasourcePayload'
      responses:
        '201':
          description: Datasource created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  uuid:
                    type: string
                    format: uuid

    get:
      summary: Get all datasources
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDatasources'

  /datasource/{uuid}:
    get:
      summary: Get a specific datasource
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasourceConfig'

    put:
      summary: Update a datasource
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasourcePayload'
      responses:
        '204':
          description: Datasource updated successfully

    delete:
      summary: Delete a datasource
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Datasource deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /datasource/{uuid}/validate:
    get:
      summary: Validate a datasource
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Datasource validated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string

  /datasource/{uuid}/activate:
    put:
      summary: Activate a datasource
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Datasource activated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /datasource/{uuid}/deactivate:
    put:
      summary: Deactivate a datasource
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Datasource deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /document:
    get:
      summary: Get all documents
      parameters:
        - in: query
          name: uuid
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: source_uuid
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDocuments'

  /document/{uuid}:
    get:
      summary: Get a specific document
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'

  /embedding-provider:
    post:
      summary: Add a new embedding provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingProviderConfig'
      responses:
        '201':
          description: Embedding provider created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingProviderConfig'

    get:
      summary: Get all embedding providers
      parameters:
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEmbeddingProviders'

  /embedding-provider/{uuid}:
    get:
      summary: Get a specific embedding provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingProviderConfig'

    put:
      summary: Update an embedding provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingProviderConfig'
      responses:
        '200':
          description: Embedding provider updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingProviderConfig'

    delete:
      summary: Delete an embedding provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Embedding provider deleted successfully

  /embedding-provider/{uuid}/activate:
    put:
      summary: Activate an embedding provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Embedding provider activated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /embedding-provider/{uuid}/deactivate:
    put:
      summary: Deactivate an embedding provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Embedding provider deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /interactions:
    post:
      summary: Create a new interaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
      responses:
        '200':
          description: Interaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interaction'

    get:
      summary: Get all interactions
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InteractionsResponse'

  /interactions/{uuid}:
    get:
      summary: Get a specific interaction
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interaction'

  /interactions/{uuid}/message:
    post:
      summary: Send a message in an interaction
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /llm-provider:
    post:
      summary: Add a new LLM provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LLMProviderConfig'
      responses:
        '201':
          description: LLM provider created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMProviderConfig'

    get:
      summary: Get all LLM providers
      parameters:
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLLMProviders'

  /llm-provider/{uuid}:
    get:
      summary: Get a specific LLM provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMProviderConfig'

    put:
      summary: Update an LLM provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LLMProviderConfig'
      responses:
        '200':
          description: LLM provider updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMProviderConfig'

    delete:
      summary: Delete an LLM provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: LLM provider deleted successfully

  /llm-provider/{uuid}/activate:
    put:
      summary: Activate an LLM provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: LLM provider activated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /llm-provider/{uuid}/deactivate:
    put:
      summary: Deactivate an LLM provider
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: LLM provider deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth/initiate:
    post:
      summary: Initiate OAuth authentication flow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthFlowRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthFlowResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/callback:
    post:
      summary: Handle OAuth callback and complete authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthCodeRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /search:
    post:
      summary: Perform a search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'

  /settings:
    get:
      summary: Get application settings
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'

    put:
      summary: Update application settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
  /users:
    get:
      summary: Get all users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'

  /users/{uuid}:
    get:
      summary: Get a specific user
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{uuid}/activate:
    put:
      summary: Activate a user
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{uuid}/deactivate:
    put:
      summary: Deactivate a user
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:
    AuthFlowRequest:
      type: object
      required:
        - auth_flow
      properties:
        auth_flow:
          type: object
          required:
            - provider
          properties:
            provider:
              type: string
              enum: [ google ]
            current_url:
              type: string
              format: uri

    AuthFlowResponse:
      type: object
      properties:
        auth_flow:
          type: object
          properties:
            provider:
              type: string
            auth_redirect_url:
              type: string
              format: uri
            state:
              type: string

    AuthCodeRequest:
      type: object
      required:
        - auth_flow
      properties:
        auth_flow:
          type: object
          required:
            - provider
            - auth_code
            - state
          properties:
            provider:
              type: string
              enum: [ google ]
            auth_code:
              type: string
            state:
              type: string
    AuthTokenResponse:
      type: object
      properties:
        access_token:
          type: string
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
    PingResponse:
      type: object
      properties:
        message:
          type: string
          example: "Pong"

    LivenessResponse:
      type: object
      properties:
        message:
          type: string
          example: "I am alive"

    ReadinessResponse:
      type: object
      properties:
        message:
          type: string
          example: "I am ready"

    AnalyticsOverview:
      type: object
      properties:
        embedding_providers:
          $ref: '#/components/schemas/EmbeddingProvidersOverview'
        llm_providers:
          $ref: '#/components/schemas/LLMProvidersOverview'
        datasources:
          $ref: '#/components/schemas/DatasourcesOverview'

    EmbeddingProvidersOverview:
      type: object
      properties:
        total_providers:
          type: integer
        total_active_providers:
          type: integer
        active_provider:
          $ref: '#/components/schemas/ProviderInfo'

    LLMProvidersOverview:
      type: object
      properties:
        total_providers:
          type: integer
        total_active_providers:
          type: integer
        active_provider:
          $ref: '#/components/schemas/ProviderInfo'

    ProviderInfo:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        model:
          type: string

    DatasourcesOverview:
      type: object
      properties:
        configured_datasources:
          type: array
          items:
            $ref: '#/components/schemas/DatasourceInfo'
        total_datasources:
          type: integer
        total_datasources_by_type:
          type: object
          additionalProperties:
            type: integer
        total_datasources_by_status:
          type: object
          additionalProperties:
            type: integer
        total_documents_fetched_by_datasource_type:
          type: object
          additionalProperties:
            type: integer

    DatasourceInfo:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time

    DatasourcePayload:
      type: object
      properties:
        name:
          type: string
        source_type:
          type: string
        settings:
          type: object

    PaginatedDatasources:
      type: object
      properties:
        datasources:
          type: array
          items:
            $ref: '#/components/schemas/DatasourceConfig'
        total:
          type: integer
        page:
          type: integer
        per_page:
          type: integer
        total_pages:
          type: integer

    DatasourceConfig:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
        source_type:
          type: string
        settings:
          type: object
        state:
          type: object

    PaginatedDocuments:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        total:
          type: integer
        page:
          type: integer
        per_page:
          type: integer
        total_pages:
          type: integer

    Document:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        url:
          type: string
        title:
          type: string
        body:
          type: string
        embedding:
          $ref: '#/components/schemas/Embedding'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
        status:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        fetched_at:
          type: string
          format: date-time
        source:
          $ref: '#/components/schemas/Source'

    Embedding:
      type: object
      properties:
        embedding:
          type: array
          items:
            $ref: '#/components/schemas/ContentPart'

    Metadata:
      type: object
      properties:
        key:
          type: string
        value:
          type: string

    Source:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string

    ContentPart:
      type: object
      properties:
        content:
          type: string
        embedding:
          type: array
          items:
            type: number
            format: float
        embedding_provider_uuid:
          type: string
          format: uuid
        embedding_prompt_token:
          type: integer
        generated_at:
          type: string
          format: date-time

    EmbeddingProviderConfig:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        provider:
          type: string
        configuration:
          type: object
        status:
          type: string

    PaginatedEmbeddingProviders:
      type: object
      properties:
        embedding_providers:
          type: array
          items:
            $ref: '#/components/schemas/EmbeddingProviderConfig'
        total:
          type: integer
        page:
          type: integer
        per_page:
          type: integer
        total_pages:
          type: integer

    Interaction:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        query:
          type: string
        conversations:
          type: array
          items:
            $ref: '#/components/schemas/Conversation'
        created_at:
          type: string
          format: date-time

    Conversation:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        role:
          type: string
        text:
          type: string
        created_at:
          type: string
          format: date-time

    InteractionsResponse:
      type: object
      properties:
        interactions:
          type: array
          items:
            $ref: '#/components/schemas/InteractionSummary'
        limit:
          type: integer
        per_page:
          type: integer

    InteractionSummary:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        title:
          type: string

    MessageResponse:
      type: object
      properties:
        response:
          type: string

    LLMProviderConfig:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        provider:
          type: string
        configuration:
          type: object
        status:
          type: string

    PaginatedLLMProviders:
      type: object
      properties:
        llm_providers:
          type: array
          items:
            $ref: '#/components/schemas/LLMProviderConfig'
        total:
          type: integer
        page:
          type: integer
        per_page:
          type: integer
        total_pages:
          type: integer

    SearchRequest:
      type: object
      properties:
        query:
          type: string

    SearchResults:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/SearchResultsDocument'
        query_text:
          type: string
        limit:
          type: integer
        page:
          type: integer
        total_pages:
          type: integer
        total_results:
          type: integer

    SearchResultsDocument:
      type: object
      properties:
        content_part:
          type: string
        content_part_id:
          type: integer
        original_document_uuid:
          type: string
          format: uuid
        relevant_score:
          type: number
          format: float

    Settings:
      type: object
      properties:
        general:
          $ref: '#/components/schemas/GeneralSettings'
        debugging:
          $ref: '#/components/schemas/DebuggingSettings'
        search:
          $ref: '#/components/schemas/SearchSettings'

    GeneralSettings:
      type: object
      properties:
        application_name:
          type: string

    DebuggingSettings:
      type: object
      properties:
        log_level:
          type: string
        log_format:
          type: string
        log_output:
          type: string

    SearchSettings:
      type: object
      properties:
        per_page:
          type: integer

    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        status:
          $ref: '#/components/schemas/UserStatus'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserRole:
      type: string
      enum: [user, developer, admin]

    UserStatus:
      type: string
      enum: [active, inactive]

    PaginatedUsers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total:
          type: integer
        page:
          type: integer
        per_page:
          type: integer
        total_pages:
          type: integer