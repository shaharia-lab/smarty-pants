name: Docker Build and Test

on:
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  check-dockerfile-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      dockerfile_changed: ${{ steps.filter.outputs.dockerfile }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          token: ${{ github.token }}
          filters: |
            dockerfile:
              - 'frontend/smarty-pants/Dockerfile'

  docker-build-and-test:
    needs: check-dockerfile-changes
    if: ${{ needs.check-dockerfile-changes.outputs.dockerfile_changed == 'true' }}
    name: Docker Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/smarty-pants/
          file: ./frontend/smarty-pants/Dockerfile
          push: false
          load: true
          tags: frontend:test

      - name: Test Docker image
        run: |
          docker run --name test-container -d -p 3000:3000 frontend:test
          sleep 10  # Give the container time to start up
          
          # Basic test to check if the server is responding
          if curl -sSf http://localhost:3000 > /dev/null; then
            echo "Docker image test passed: Server is responding"
          else
            echo "Docker image test failed: Server is not responding"
            exit 1
          fi
          
          docker stop test-container
          docker rm test-container

      - name: Cleanup
        if: always()
        run: docker image rm frontend:test
