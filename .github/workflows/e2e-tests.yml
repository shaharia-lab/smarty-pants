name: End-to-End Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest

    services:
      db:
        image: ankane/pgvector
        env:
          POSTGRES_DB: app
          POSTGRES_USER: app
          POSTGRES_PASSWORD: pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U app"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Build Backend Docker Image
        run: |
          cd backend
          docker build -t backend-image .

      - name: Run Backend Docker Container
        run: |
          docker run -d --name backend-container \
            --network host \
            -e DB_HOST=127.0.0.1 \
            -e DB_PORT=5432 \
            -e DB_NAME=app \
            -e DB_USER=app \
            -e DB_PASS=pass \
            backend-image

      - name: Check Docker Container Status
        run: |
          docker ps -a
          docker logs backend-container

      - name: Wait for Backend to be Ready
        run: |
          timeout 60s bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/system/ping)" != "200" ]]; do sleep 5; done' || false

      - name: Check Backend Logs if Startup Failed
        if: failure()
        run: |
          echo "Backend failed to start. Checking logs:"
          docker logs backend-container

      - name: Install Frontend Dependencies
        run: |
          cd frontend/smarty-pants
          npm ci

      - name: Build Frontend
        run: |
          cd frontend/smarty-pants
          npm run build

      - name: Start Frontend
        run: |
          cd frontend/smarty-pants
          npm run start & # Run in background
          echo $! > frontend.pid # Save process ID

      - name: Wait for Frontend to be Ready
        run: |
          timeout 60s bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:3000/login)" != "200" ]]; do sleep 5; done' || false

      - name: Run E2E Tests
        run: |
          cd frontend/smarty-pants
          npm run cypress:run -- --config baseUrl=http://localhost:3000

      - name: Check Backend Logs After Tests
        if: always()
        run: |
          echo "Backend logs after tests:"
          docker logs backend-container

      - name: Upload Cypress Screenshots
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/smarty-pantscypress/screenshots

      - name: Upload Cypress Videos
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cypress-videos
          path: frontend/smarty-pants/cypress/videos